[{"C:\\Users\\schra\\projects\\browser-shelf\\src\\App.tsx":"1","C:\\Users\\schra\\projects\\browser-shelf\\src\\stories\\Header.tsx":"2","C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\atoms\\ItemLogo\\ItemLogo.tsx":"3","C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\atoms\\ItemLogo\\ItemLogo.stories.tsx":"4","C:\\Users\\schra\\projects\\browser-shelf\\src\\stories\\Header.stories.tsx":"5","C:\\Users\\schra\\projects\\browser-shelf\\src\\reportWebVitals.ts":"6","C:\\Users\\schra\\projects\\browser-shelf\\src\\firebase.js":"7","C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\molecules\\index.tsx":"8","C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\templates\\Home\\index.tsx":"9","C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\molecules\\ValueFilter\\index.tsx":"10","C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\molecules\\RangeFilter\\RangeFilter.tsx":"11","C:\\Users\\schra\\projects\\browser-shelf\\src\\integrations.ts":"12","C:\\Users\\schra\\projects\\browser-shelf\\src\\index.tsx":"13","C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\molecules\\KeywordFilter\\index.tsx":"14","C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\molecules\\ValueFilter\\ValueFilter.tsx":"15","C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\atoms\\ItemWords\\ItemWords.tsx":"16","C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\molecules\\RangeFilter\\index.tsx":"17","C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\molecules\\ItemList\\index.tsx":"18","C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\molecules\\Item\\Item.tsx":"19","C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\templates\\Home\\Home.tsx":"20","C:\\Users\\schra\\projects\\browser-shelf\\src\\functions.ts":"21","C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\templates\\GoogleAuth\\index.tsx":"22","C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\templates\\GoogleAuth\\GoogleAuth.tsx":"23","C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\organisms\\index.tsx":"24","C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\molecules\\KeywordFilter\\KeywordFilter.tsx":"25","C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\molecules\\ItemList\\ItemList.tsx":"26","C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\organisms\\FilterSorterBox\\FilterSorterBox.tsx":"27","C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\templates\\index.tsx":"28","C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\organisms\\IntegrationModal\\index.tsx":"29","C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\organisms\\Header\\Header.tsx":"30"},{"size":1622,"mtime":1609195327168,"results":"31","hashOfConfig":"32"},{"size":1356,"mtime":499162500000,"results":"33","hashOfConfig":"34"},{"size":731,"mtime":1609193424658,"results":"35","hashOfConfig":"32"},{"size":446,"mtime":1607634958581,"results":"36","hashOfConfig":"34"},{"size":510,"mtime":499162500000,"results":"37","hashOfConfig":"34"},{"size":425,"mtime":1606760982094,"results":"38","hashOfConfig":"39"},{"size":618,"mtime":1607478177362,"results":"40","hashOfConfig":"32"},{"size":150,"mtime":1608685719205,"results":"41","hashOfConfig":"32"},{"size":23,"mtime":1609182184333,"results":"42","hashOfConfig":"32"},{"size":30,"mtime":1608253789943,"results":"43","hashOfConfig":"39"},{"size":3530,"mtime":1608685710519,"results":"44","hashOfConfig":"32"},{"size":7952,"mtime":1609194425050,"results":"45","hashOfConfig":"32"},{"size":502,"mtime":1608746021189,"results":"46","hashOfConfig":"32"},{"size":32,"mtime":1608253816073,"results":"47","hashOfConfig":"32"},{"size":3634,"mtime":1608687226821,"results":"48","hashOfConfig":"39"},{"size":1261,"mtime":1609193527527,"results":"49","hashOfConfig":"39"},{"size":30,"mtime":1608253804610,"results":"50","hashOfConfig":"39"},{"size":27,"mtime":1607821058359,"results":"51","hashOfConfig":"32"},{"size":1042,"mtime":1607905721656,"results":"52","hashOfConfig":"39"},{"size":3347,"mtime":1609195331180,"results":"53","hashOfConfig":"32"},{"size":1089,"mtime":1608583547229,"results":"54","hashOfConfig":"32"},{"size":29,"mtime":1608780600458,"results":"55","hashOfConfig":"32"},{"size":986,"mtime":1609191593163,"results":"56","hashOfConfig":"39"},{"size":98,"mtime":1608746122369,"results":"57","hashOfConfig":"32"},{"size":5709,"mtime":1608673935048,"results":"58","hashOfConfig":"39"},{"size":5202,"mtime":1607989360572,"results":"59","hashOfConfig":"32"},{"size":4402,"mtime":1609194832495,"results":"60","hashOfConfig":"32"},{"size":54,"mtime":1609183786397,"results":"61","hashOfConfig":"32"},{"size":35,"mtime":1608745443630,"results":"62","hashOfConfig":"32"},{"size":1403,"mtime":1608150857473,"results":"63","hashOfConfig":"32"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"7dl29a",{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1p5vakb",{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1vfpj0i",{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\schra\\projects\\browser-shelf\\src\\App.tsx",["129"],"C:\\Users\\schra\\projects\\browser-shelf\\src\\stories\\Header.tsx",[],"C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\atoms\\ItemLogo\\ItemLogo.tsx",[],"C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\atoms\\ItemLogo\\ItemLogo.stories.tsx",[],"C:\\Users\\schra\\projects\\browser-shelf\\src\\stories\\Header.stories.tsx",[],"C:\\Users\\schra\\projects\\browser-shelf\\src\\reportWebVitals.ts",["130"],"C:\\Users\\schra\\projects\\browser-shelf\\src\\firebase.js",[],["131","132"],"C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\molecules\\index.tsx",[],["133","134"],"C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\templates\\Home\\index.tsx",[],"C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\molecules\\ValueFilter\\index.tsx",[],"C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\molecules\\RangeFilter\\RangeFilter.tsx",["135"],"C:\\Users\\schra\\projects\\browser-shelf\\src\\integrations.ts",["136","137","138","139","140","141","142","143","144"],"/*global chrome*/\r\nimport OAuth from 'oauth-1.0a';\r\nimport crypto from 'crypto';\r\nimport axios from 'axios';\r\nimport qs from 'querystring';\r\nimport firebase from './firebase';\r\nimport snoowrap from 'snoowrap';\r\n\r\n\r\nconst getServiceCredentials = async (service: string) => {\r\n    const db: firebase.firestore.Firestore = firebase.firestore();\r\n    const { id: serviceId, api_key, api_secret } = await\r\n        db.collection('services').where('name', '==', service).get()\r\n            .then(snapshot => Object.assign(snapshot.docs[0].data(), snapshot.docs[0].id))\r\n            .catch(error => {\r\n                console.error(`Error on ${service} service retrieval: `, error);\r\n                return {} as firebase.firestore.DocumentData;\r\n            });\r\n    return { serviceId, api_key, api_secret };\r\n};\r\n\r\nconst saveToken = (token: string, path: string) => {\r\n    chrome.storage.local.get('userId', (items: {[key:string]:string}) => {\r\n        const db: firebase.firestore.Firestore = firebase.firestore();\r\n        db.doc(`users/${items.userId}`)\r\n            .set({ [path]: token })\r\n            .catch(error => console.error('Error on service token save: ', error))\r\n    });\r\n};\r\n\r\nconst getToken = (path: string) => {\r\n    let token: string | undefined;\r\n    chrome.storage.local.get('userId', async (items: {[key:string]:string}) => {\r\n        const db: firebase.firestore.Firestore = firebase.firestore();\r\n        const doc = await db.doc(`users/${items.userId}`).get();\r\n        token = doc.get(path);\r\n    });\r\n    return token;\r\n}\r\n\r\nconst redditIntegration = async () => {\r\n    const { serviceId, api_key, api_secret } = await getServiceCredentials('reddit');\r\n    const authUrl = snoowrap.getAuthUrl({\r\n        clientId: api_key,\r\n        scope: ['subscribe', 'mysubreddits', 'read', 'identity', 'history'],\r\n        permanent: true,\r\n        state: Math.random().toString(36).substring(20),\r\n        redirectUri: 'https://gnjegppndlhpgokhplnejddjhgejnplb.chromiumapp.org'\r\n    });\r\n    chrome.identity.launchWebAuthFlow({ url: authUrl }, (responseUrl: string | undefined) => {\r\n        const code = new URL(responseUrl as string).searchParams.get('code');\r\n        saveToken(code as string, 'integrations.reddit.key');\r\n        snoowrap.fromAuthCode({\r\n            code: code as string,\r\n            userAgent: 'Browser Shelf',\r\n            clientId: api_key,\r\n            redirectUri: 'https://gnjegppndlhpgokhplnejddjhgejnplb.chromiumapp.org',\r\n        }).then(async (r: snoowrap) => {\r\n            const savedContent = await\r\n            r.getMe().getSavedContent()\r\n                .then(content => content.fetchAll())\r\n                .then(content => {\r\n                    content.map(console.log);\r\n                    return content;\r\n                });\r\n            const upvotedContent = await\r\n            r.getMe().getUpvotedContent()\r\n                .then(content => content.fetchAll())\r\n                .then(content => {\r\n                    content.map(console.log);\r\n                    return content;\r\n                });\r\n        })\r\n    });\r\n};\r\n\r\nconst twitterIntegration = async () => {\r\n    const { serviceId, api_key, api_secret } = await getServiceCredentials('twitter');\r\n\r\n    const requestTokenURL = 'https://api.twitter.com/oauth/request_token';\r\n    const authorizeURL = new URL('https://api.twitter.com/oauth/authorize');\r\n    const accessTokenURL = 'https://api.twitter.com/oauth/access_token';\r\n\r\n    const recentLikesURL = 'https://api.twitter.com/1.1/favorites/list.json';\r\n    const listBookmarksURL = 'https://api.twitter.com/2/timeline/bookmark.json';\r\n\r\n    const oauth = new OAuth({\r\n        consumer: { key: api_key, secret: api_secret },\r\n        signature_method: 'HMAC-SHA1',\r\n        hash_function: (base, key) => crypto.createHmac('sha1', key).update(base).digest('base64')\r\n    });\r\n\r\n    const requestToken:\r\n    () => Promise<qs.ParsedUrlQuery> = \r\n    async () => {\r\n        const header = oauth.toHeader(\r\n            oauth.authorize({ url: requestTokenURL, method: 'POST' }));\r\n        const res = await axios.post(\r\n            requestTokenURL,\r\n            { oauth_callback: 'oob' },\r\n            { headers: {Authorization: header.Authorization} }\r\n        );\r\n        if (!res.data) throw new Error('Failed to get OAuth request token!');\r\n        return qs.parse(res.data);\r\n    };\r\n\r\n    const accessToken:\r\n    (token: qs.ParsedUrlQuery, verifier: string) => Promise<qs.ParsedUrlQuery> = \r\n    async ({ oauth_token }, oauth_verifier) => {\r\n        const header = oauth.toHeader(\r\n            oauth.authorize({ url: accessTokenURL, method: 'POST' }));\r\n        const res = await axios.post(accessTokenURL, null, { \r\n            headers: { Authorization: header.Authorization },\r\n            params: { oauth_verifier, oauth_token }\r\n        });\r\n        if (!res.data) throw new Error('Failed to retrieve OAuth request token!');\r\n        return qs.parse(res.data);\r\n    };\r\n\r\n    const getRecentLikes:\r\n    (token: qs.ParsedUrlQuery) => any = \r\n    async ({ oauth_token, oauth_token_secret }) => {\r\n        const token = { \r\n            key: oauth_token as string, \r\n            secret: oauth_token_secret as string \r\n        };\r\n        const header = oauth.toHeader(\r\n            oauth.authorize({ url: recentLikesURL, method: 'GET' }, token));\r\n        const res = await axios.get(recentLikesURL, {\r\n            headers: {Authorization: header.Authorization},\r\n            params: {\r\n                include_entities: true,\r\n                count: 200\r\n            }\r\n        });\r\n        if (!res.data) throw new Error('Unsuccessful request.');\r\n        return JSON.parse(res.data);\r\n    };\r\n\r\n    const getBookmarks:\r\n    (token: qs.ParsedUrlQuery) => any = \r\n    async ({ oauth_token, oauth_token_secret }) => {\r\n        const token = { \r\n            key: oauth_token as string, \r\n            secret: oauth_token_secret as string \r\n        };\r\n        const header = oauth.toHeader(\r\n            oauth.authorize({ url: listBookmarksURL, method: 'GET' }, token));\r\n        const res = await axios.get(listBookmarksURL, {\r\n            headers: {\r\n                Authorization: header.Authorization,\r\n                credentials: 'same-origin'\r\n            },\r\n            params: {\r\n                count: 200,\r\n                include_profile_interstitial_type: 1,\r\n                include_reply_count: 1,\r\n                include_blocking: 1,\r\n                include_blocked_by: 1,\r\n                tweet_mode: 'extended',\r\n                include_can_dm: 1,\r\n                include_followed_by: 1,\r\n                include_want_retweets: 1,\r\n                include_can_media_tag: 1,\r\n                cards_platform: 'Web-12'\r\n            }\r\n        });\r\n        if (!res.data) throw new Error('Unsuccessful request.');\r\n        return JSON.parse(res.data);\r\n    };\r\n\r\n    return (async () => {\r\n        const oAuthRequestToken = await requestToken();\r\n        authorizeURL.searchParams.append(\r\n            'oauth_token', oAuthRequestToken.oauth_token as string);\r\n        let pin: string | undefined;\r\n        const oAuthAccessToken = await accessToken(oAuthRequestToken, (pin as string).trim());\r\n\r\n        const favorites = await getRecentLikes(oAuthAccessToken);\r\n        const bookmarks = await getBookmarks(oAuthAccessToken);\r\n\r\n        const db = firebase.firestore();\r\n        const userId = '';\r\n        \r\n        db.doc(`users/${userId}`).update({\r\n            'integrations.twitter': {\r\n                token: oAuthAccessToken,\r\n                service: db.doc(`services/${serviceId}`)\r\n            }\r\n        })\r\n        try {\r\n            \r\n            console.log(bookmarks);\r\n            return {\r\n                favorites,\r\n                bookmarks\r\n            };\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            return { error };\r\n        }\r\n    })();\r\n};\r\n\r\nexport {\r\n    twitterIntegration,\r\n    redditIntegration\r\n};","C:\\Users\\schra\\projects\\browser-shelf\\src\\index.tsx",[],"C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\molecules\\KeywordFilter\\index.tsx",[],"C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\molecules\\ValueFilter\\ValueFilter.tsx",[],[],"C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\atoms\\ItemWords\\ItemWords.tsx",[],"C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\molecules\\RangeFilter\\index.tsx",[],"C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\molecules\\ItemList\\index.tsx",[],"C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\molecules\\Item\\Item.tsx",[],[],"C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\templates\\Home\\Home.tsx",[],"C:\\Users\\schra\\projects\\browser-shelf\\src\\functions.ts",[],"C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\templates\\GoogleAuth\\index.tsx",[],"C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\templates\\GoogleAuth\\GoogleAuth.tsx",[],"C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\organisms\\index.tsx",[],"C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\molecules\\KeywordFilter\\KeywordFilter.tsx",[],"C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\molecules\\ItemList\\ItemList.tsx",[],"C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\organisms\\FilterSorterBox\\FilterSorterBox.tsx",[],"C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\templates\\index.tsx",[],"C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\organisms\\IntegrationModal\\index.tsx",[],"C:\\Users\\schra\\projects\\browser-shelf\\src\\components\\organisms\\Header\\Header.tsx",[],{"ruleId":"145","severity":1,"message":"146","line":48,"column":7,"nodeType":"147","messageId":"148","endLine":48,"endColumn":16},{"ruleId":"149","severity":1,"message":"150","line":3,"column":25,"nodeType":"151","messageId":"152","endLine":3,"endColumn":57},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","replacedBy":"156"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","severity":1,"message":"158","line":78,"column":8,"nodeType":"159","endLine":78,"endColumn":23,"suggestions":"160"},{"ruleId":"161","severity":1,"message":"162","line":31,"column":7,"nodeType":"147","messageId":"163","endLine":31,"endColumn":15},{"ruleId":"149","severity":1,"message":"150","line":41,"column":27,"nodeType":"151","messageId":"152","endLine":41,"endColumn":38},{"ruleId":"161","severity":1,"message":"164","line":42,"column":13,"nodeType":"147","messageId":"163","endLine":42,"endColumn":22},{"ruleId":"161","severity":1,"message":"165","line":42,"column":33,"nodeType":"147","messageId":"163","endLine":42,"endColumn":43},{"ruleId":"161","severity":1,"message":"166","line":59,"column":19,"nodeType":"147","messageId":"163","endLine":59,"endColumn":31},{"ruleId":"161","severity":1,"message":"167","line":66,"column":19,"nodeType":"147","messageId":"163","endLine":66,"endColumn":33},{"ruleId":"149","severity":1,"message":"150","line":77,"column":28,"nodeType":"151","messageId":"152","endLine":77,"endColumn":39},{"ruleId":"168","severity":1,"message":"169","line":121,"column":35,"nodeType":"170","messageId":"171","endLine":121,"endColumn":38,"suggestions":"172"},{"ruleId":"168","severity":1,"message":"169","line":141,"column":35,"nodeType":"170","messageId":"171","endLine":141,"endColumn":38,"suggestions":"173"},"@typescript-eslint/no-redeclare","'authState' is already defined.","Identifier","redeclared","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","no-native-reassign",["174"],"no-negated-in-lhs",["175"],"react-hooks/exhaustive-deps","React Hook React.useMemo has missing dependencies: 'binCount', 'filterName', and 'toNum'. Either include them or remove the dependency array.","ArrayExpression",["176"],"@typescript-eslint/no-unused-vars","'getToken' is assigned a value but never used.","unusedVar","'serviceId' is assigned a value but never used.","'api_secret' is assigned a value but never used.","'savedContent' is assigned a value but never used.","'upvotedContent' is assigned a value but never used.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["177","178"],["179","180"],"no-global-assign","no-unsafe-negation",{"desc":"181","fix":"182"},{"messageId":"183","fix":"184","desc":"185"},{"messageId":"186","fix":"187","desc":"188"},{"messageId":"183","fix":"189","desc":"185"},{"messageId":"186","fix":"190","desc":"188"},"Update the dependencies array to be: [binCount, filterName, state.results, toNum]",{"range":"191","text":"192"},"suggestUnknown",{"range":"193","text":"194"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"193","text":"195"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"196","text":"194"},{"range":"196","text":"195"},[2300,2315],"[binCount, filterName, state.results, toNum]",[5013,5016],"unknown","never",[5733,5736]]